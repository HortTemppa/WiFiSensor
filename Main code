
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <DHTesp.h>

#ifndef APSSID
#define APSSID "LAD"
#define APPSK  "12345678"
#endif

ESP8266WebServer server(80);
DHTesp dht;

const char *ssid = APSSID;
const char *password = APPSK;

int Temperature;
int Humidity;
double WaterVapourDeficit;
int DewPoint;

int DHTpin = D4;

int SensorCheckFrequency = 2000;
int SensorCheckMillis;

int TargetTemperature;

String html1;
String html2;


void handlePostForm(){
  html1 = String ("<!DOCTYPE html><html><head><meta charset='UTF-8'></head><body><h2>Data sent.</h2><style>body{margin:auto; font-size:32px;}</style><div><table border 2px solid black><tr><td>Lämpötila</td><td>Ilmankosteus</td><td>Kastepiste</td><td>Kyllästysvaje</td></tr><tr><td>")+Temperature+"</td><td>" + Humidity + "</td><td>" + DewPoint + "</td><td>" + WaterVapourDeficit + "</td></tr></table><form = action='/PostForm' name = 'Form' method='post'>Lämpötila:<input type='number' name = 'Lampo'/><input type='submit' value='Save'/></div></body></html>";
  server.send(200, "text/html", html1);
  Serial.println(server.arg("Lampo"));
  TargetTemperature = server.arg("Lampo").toInt();
  Serial.println(TargetTemperature);
  };
  
void handleRoot() {
  
  html1 = String ("<!DOCTYPE html><html><head><meta charset='UTF-8'></head><body><style>body{margin:auto; font-size:32px;}</style><div><table border 2px solid black><tr><td>Lämpötila</td><td>Ilmankosteus</td><td>Kastepiste</td><td>Kyllästysvaje</td></tr><tr><td>")+Temperature+"</td><td>"+Humidity+"</td><td>"+DewPoint+"</td><td>"+WaterVapourDeficit+"</td></tr></table><style>margin-top:10px;</style><form = action='/PostForm' name='Form'method='post'>Lämpötila:<input type='number' name = 'Lampo'/><input type='submit' value='Save'/></div></body></html>";
  server.send(200, "text/html", html1);
  
};

void setup() {
  delay(1000);
  Serial.begin(115200);
  dht.setup(DHTpin, DHTesp::DHT11);
  Serial.println();
  Serial.print("Configuring access point...");
  /* You can remove the password parameter if you want the AP to be open. */
  WiFi.softAP(ssid, password);

  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  server.on("/", handleRoot);
  server.on("/PostForm", HTTP_POST, handlePostForm);
  server.begin();
  Serial.println("HTTP server started");
}

void SensorCheck() {
  Temperature = dht.getTemperature();
  Humidity = dht.getHumidity();
  double lampotilaKaava = (Temperature + 273.15) * 9 / 5;
  // määrittää kastepisteen, kaava Wikipediasta
  double y = log((float)Humidity / 100) + ((17.27 * Temperature) / (237.4 + Temperature));
  DewPoint = (237.4 * y) / (17.27 - y);
  // laskee maximi vesihöyrynpaineen sensorin mittaamassa lämpötilassa
  double MaxWaterVapourPressure = (pow (2.718281828459045235360287471352, ((-1.044039 * (pow (10, 4)) / lampotilaKaava) - 1.1294650 * (pow(10, 1)) + ((-2.7022355 * (pow(10, -2))) * lampotilaKaava) + ((1.2890360 * (pow(10, -5))) * (pow(lampotilaKaava, 2))) + ((-2.4780681 * (pow(10, -9))) * (pow (lampotilaKaava, 3))) + (6.5459673 * log((float) lampotilaKaava))))) * 6.89475729;
  // laskee tämän hetkisen vesihöyrypaineen
  double RealWaterVapourPressure = MaxWaterVapourPressure * Humidity / 100;
  // laskee vesihöyrypaineen kyllästysvajauksen
  WaterVapourDeficit = MaxWaterVapourPressure - RealWaterVapourPressure;
  SensorCheckMillis = millis();
};

void loop() {
  server.handleClient();
  int CurrentMillis = millis();
  if (CurrentMillis - SensorCheckMillis >= SensorCheckFrequency) {
  SensorCheck();
  }
}
